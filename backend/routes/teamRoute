const express = require("express");
const middleware = require("../middleware");
const user = require("../models/user");
const team = require("../models/team");
const {z} = require("zod");

const app = express();

const teamSchema = z.object({
  teamName: z.string().min(3),
  lookingFor: z.array(z.string()).optional(),
  achievements: z.string(),
  games: z.string().min(1),
  experience: z.string(),
  members: z.string(),
})

app.get("/search", async (req, res) => {
  const {games, achievements, lookingFor, experience} = req.query;

  let filter = {};
  if(games){
    filter.games = games;
  }
  if(achievements){
    filter.achievements = achievements;
  }
  if(lookingFor){
    filter.lookingFor = lookingFor;
  }
  if(experience){
    filter.experience = experience;
  }

  try {
    const teams = await team.find(filter).populate("members", "username email");
    res.json(teams);
  } catch (error) {
    res.status(500).json({
      error: "Team not found"
    })
  }
})

app.post("/signup", middleware, async (req, res) => {
  try {
    const validatedData = teamValidationSchema.parse(req.body);

    const existingTeam = await Team.findOne({ teamName: validatedData.teamName });
    if (existingTeam) {
      return res.status(400).json({ error: "Team name already exists" });
    }

    const newTeam = new Team({
      ...validatedData,
      createdBy: req.user.userId,
      members: [req.user.userId],
    });

    await newTeam.save();

    await user.findByIdAndUpdate(req.user.userId, { team: newTeam._id });

    res.status(201).json({
      msg: "Team created successfully",
      team: newTeam,
    });

  } catch (error) {
    console.error(error);
    res.status(400).json({ 
      error: "Invalid request"
    });
  }
});

app.post("/teamId/join", middleware, async (req, res) => {
  try {
    const team = await Team.findById(req.params.teamId);
    const user = await Team.findById(req.user.userId);

    if(!team){
      return res.status(404).json({
        error: "Team not found"
      })
    }
    if(team.joinRequests.includes(req.user.userId)){
      return res.status(404).json({
        error: "You have already sent a request"
      })
    }

    team.joinRequests.push(req.user.userId);
    await team.save();
    res.json({message: "Join request sent"})
  } catch (error) {
    res.status(500).json({
      error: "Internal server error"
    })
  }
});

app.post("/teamId/handle-request", middleware, async (req, res) => {
  const { userId, action } = req.body;

  try {
    const team = await Team.findById(req.params.teamId);;
    if(!team){
      return res.status(404).json({
        error: "Team not found"
      })
    }
    if(String(team.createdBy) !== req.user.userId){
      return res.status(404).json({
        error: "Only owner can handle requests"
      })
    }
    if(!team.joinRequests.includes(userId)){
      return res.status(404).json({
        error: "No join requests"
      })
    }
    if(action == "accept"){
      team.members.push(userId);
      await UserActivation.findByIdAndUpdate(userId, { team: team._id });
    }

    team.joinRequests = team.joinRequests.filter(id => String(id) !== userId);
    await team.save();

    res.json({message: `Request ${action}ed`});

  } catch (error) {
    res.status(500).json({
      error: "Internal server error"
    })
  }
})

module.exports = app;